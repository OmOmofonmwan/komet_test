name: Workflow Call Installer Workflow
description: Installer Workflow Test
inputs:
  branch_name:
    type: string
    required: false
  isSnapshot:
    type: string
    required: true
  release_upload_url:
    type: string
    required: false

  
runs:
  using: "composite"
  steps:
    - name: Current OS
      run: echo "Current OS - ${{matrix.os}}"
      shell: bash

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        ref: ${{inputs.branch_name}}


    - name: IS_SNAPSHOT
      if: inputs.isSnapshot == 'true'
      uses: actions/github-script@v7
      id: snapshot_installers_vars
      with:
        result-encoding: json
        script: |
            //Get MacOS Suffix

            var macos_suffix = '';
            if ("${{matrix.os}}".includes("macos")){
            macos_suffix = ("${{matrix.os}}".includes("13")) ? "-intel" : "-m1"
            }
            
            // Get OS Name
            const NODE_NAME = "${{matrix.os}}".includes("ubuntu") ? "linux" : "${{matrix.os}}".split('-')[0] + macos_suffix;
            

            var snapshotBranchName = 'main'; 
            if ("${{env.BRANCH_NAME}}" != "main"){
            try {
                snapshotBranchName = "${{env.BRANCH_NAME}}".split('/')[1].substring(0, Math.min("${{env.BRANCH_NAME}}".split('/')[1].length, 15))
            } catch(ex) {
                snapshotBranchName = "${{env.BRANCH_NAME}}".substring(0, Math.min("${{env.BRANCH_NAME}}".length, 15))
            }
            }
            

            const jpackageAppName = `Komet-SNAPSHOT-${NODE_NAME}-${snapshotBranchName}`;
            const jpackageAppVersion = "${{needs.initialize.outputs.POM_VERSION}}".split('.')[0] + "." + "${{needs.initialize.outputs.POM_VERSION}}".split('.')[1] + "." + "${{github.run_number}}"
            const mvnInstallerArgs = `-Pcreate-installer -D"jpackage.app.name"=${jpackageAppName} -D"jpackage.app.dest"=target/dist/snapshot-installer -D"jpackage.app.version"=${jpackageAppVersion}`


            return {jpackageAppName, jpackageAppVersion, mvnInstallerArgs};

    - name: Build Installers (SNAPSHOT)
      if: needs.initialize.outputs.IS_SNAPSHOT == 'true'
      run: |
        ./mvnw clean install ${{fromJson(steps.snapshot_installers_vars.outputs.result).mvnInstallerArgs}} -B -e -D"org.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener"=warn -D"maven.build.cache.enabled"=false -DskipTests -DskipITs
      shell: bash

    - name: Upload SNAPSHOT Installers
      uses: actions/upload-artifact@v4
      if: needs.initialize.outputs.IS_SNAPSHOT == 'true'
      shell: bash
      with:
        name: ${{fromJson(steps.snapshot_installers_vars.outputs.result).jpackageAppName}}-${{fromJson(steps.snapshot_installers_vars.outputs.result).jpackageAppVersion}}
        path: application/target/dist/snapshot-installer/*

    - name: Build Installers (Release)
      if: needs.initialize.outputs.IS_SNAPSHOT == 'false'
      shell: bash
      run: |
        ./mvnw clean install -P create-installer -B -e -D"org.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener"=warn -D"maven.build.cache.enabled"=false -DskipTests -DskipITs

    - name: upload linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ inputs.release_upload_url }}
        asset_path: application/target/dist/installer/*
        asset_name: Komet ${{needs.initialize.outputs.POM_VERSION}} Installer Linux rpm (unsigned)
        asset_content_type: application/rpm
