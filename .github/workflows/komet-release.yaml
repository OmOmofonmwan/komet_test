name: Komet Release Workflow

run-name: "Releasing ${{ github.event.repository.name }} #${{github.run_number}}"

# Trigger workflow manually
on:
  workflow_dispatch:
    inputs:
      release_message:
        type: string
        description: "(Optional) Enter Release Message"

# Define environment parameters
env:
  BRANCH_NAME: ${{github.ref_name}}
  TRUNK_BRANCH_NAME: main
  RELEASE_MESSAGE: ${{github.event.inputs.release_message}}

# Define jobs within the workflow
jobs:
  initialization:
    if: github.repository_owner == 'ikmdev'
    runs-on: ubuntu-latest
    name: Initialization
    outputs:
      NEXT_SNAPSHOT_VERSION: ${{steps.nextSnapshotVersion.outputs.SnapshotVersion}}
      RELEASE_VERSION: ${{steps.splitCurrentVersion.outputs._0}}

    steps:
      - name: Verify Branch
        if: env.BRANCH_NAME != env.TRUNK_BRANCH_NAME
        run: |
          echo "ERROR: Attempting to release from branch ${{env.BRANCH_NAME}}. Release from ${{env.TRUNK_BRANCH_NAME}} branch only"
          exit 1

      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
            token: ${{secrets.IKMDEVOPS_PAT_TOKEN}}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '21'

      - name: Extract GAV
        id: extract
        uses: andreacomo/maven-gav-extractor@v2

      - name: Log GAV
        run: |
            echo ${{ steps.extract.outputs.group-id }}
            echo ${{ steps.extract.outputs.artifact-id }}
            echo ${{ steps.extract.outputs.version }}
            echo ${{ steps.extract.outputs.name }}

      - name: Get Current Version
        run: |
          echo "POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Print Version
        run: echo ${{env.POM_VERSION}}

      - name: Verify Is SNAPSHOT Version
        if: ${{ !contains(env.POM_VERSION, '-SNAPSHOT')}}
        run: |
          echo "ERROR: Version is set to incompatible version ${{env.POM_VERSION}}. Only SNAPSHOT development versions can be converted to a release version."
          exit 1

      - name: Split version code
        uses: xom9ikk/split@v1.1
        id: splitCurrentVersion
        with:
          string: ${{env.POM_VERSION}}
          separator: '-'
          limit: -1

      - name: Split version code - Separate By .
        uses: xom9ikk/split@v1.1
        id: splitVersionMinor
        with:
          string: ${{steps.splitCurrentVersion.outputs._0}}
          separator: .
          limit: -1

      - name: Increment Snapshot Version
        id: nextSnapshotVersion
        run: |
          echo "SnapshotVersion=${{steps.splitVersionMinor.outputs._0}}.$((${{steps.splitVersionMinor.outputs._1}} + 1)).${{steps.splitVersionMinor.outputs._2}}-SNAPSHOT" >> $GITHUB_OUTPUT

      - name: Print Information
        run: |
          echo "Release Version -- ${{steps.splitCurrentVersion.outputs._0}}"
          echo "Snapshot Version -- ${{steps.nextSnapshotVersion.outputs.SnapshotVersion}}"
  

      - name: Set Release Version
        run: |
         mvn -B versions:set \
            -DnewVersion=${{steps.splitCurrentVersion.outputs._0}} \
            -DgenerateBackupPoms=false

      - name: Build Release Version
        run: |
            mvn -version
            mvn clean install \
            --batch-mode \
            -e \
            -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
            -PcodeQuality,release-enforcement

      - name: Create tag
        run: |
            git remote set-url origin https://git:${{secrets.IKMDEVOPS_PAT_TOKEN}}@github.com/${{github.repository}}.git
            git pull -p
            git add .
            git config user.name "ikmdevops"
            git config user.email ${{vars.IKMDEVOPS_EMAIL}}
            git commit -m 'Release ${{steps.splitCurrentVersion.outputs._0}}'
            git tag -a ${{steps.splitCurrentVersion.outputs._0}} -m '${{steps.splitCurrentVersion.outputs._0}}' --force

      - name: Set Dev Version
        run: |
          mvn -B versions:set \
          -DnewVersion=${{steps.nextSnapshotVersion.outputs.SnapshotVersion}} \
          -DgenerateBackupPoms=false

      - name: Commit & Push
        run: |
            git add .
            git commit -m 'Set next dev version to ${{steps.nextSnapshotVersion.outputs.SnapshotVersion}}'
            git push origin HEAD:main
            git push --tags origin
  
    # Creating a release
  create_release:
      name: Create Release
      permissions: write-all
      needs:
        - initialization
      runs-on: ubuntu-latest
      outputs:
        RELEASE_UPLOAD_URL: ${{steps.create_release.outputs.upload_url}}
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  
        - name: Modify Release Message
          if: needs.initialization.outputs.RELEASE_VERSION == ''
          run: echo "RELEASE_MESSAGE=Release ${{needs.initialization.outputs.RELEASE_VERSION }}" >> $GITHUB_ENV
  
        - name: Create Release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
          with:
            tag_name: ${{ needs.initialization.outputs.RELEASE_VERSION  }}
            release_name: Release ${{ needs.initialization.outputs.RELEASE_VERSION  }}
            body: ${{env.RELEASE_MESSAGE}}
            draft: false
            prerelease: false
    
  call_release_workflow_with_custom_inputs:
    name: Call Reusable Workflow With Inputs
    strategy:
      matrix:
            #os: [macos-13, macos-14, ubuntu-20.04, windows-2022]
        os: [ubuntu-20.04]
    needs: 
        - create_release
        - initialization
    runs-on: ${{matrix.os}}
    steps:
       - name: Checkout Code Repository
         uses: actions/checkout@v4
         with:
            token: ${{secrets.IKMDEVOPS_PAT_TOKEN}}
    
       - name: Setup Java
         uses: actions/setup-java@v4
         with:
            distribution: 'adopt'
            java-version: '21'

       - name: Composite Action
         uses: ./.github/composite/action.yml
         with:
            branch_name: ${{github.ref_name}}
            isSnapshot: "false"
            release_upload_url: ${{needs.create_release.outputs.RELEASE_UPLOAD_URL}}
            pom_version: ${{needs.initialization.outputs.RELEASE_VERSION}}
            github_token: ${{secrets.GITHUB_TOKEN}}
            operating_system: ${{matrix.os}}
            